package lt.vaidotas.bes.generator;

import java.math.BigInteger;

import lt.vaidotas.bes.generatable.BigInteger8BitGeneratable;
/**
 * 
 * @author Vaidotas
 * Generator for generating big integers, where each next value is 
 * generated by multiplying previous value by constant, and taking remainder of division
 * by other constant. Numbers are compared on last 8 bits. 
 */
public class MultiplicativeRemainderGenerator extends SequentialGenerator<BigInteger8BitGeneratable> {
    
    private final BigInteger divisor;
    private final BigInteger multiplier;
    private final BigInteger seed;
    
    public MultiplicativeRemainderGenerator(BigInteger pDivisor, 
            BigInteger pMultiplier, BigInteger pSeed){
        this.divisor = pDivisor;
        this.multiplier = pMultiplier;
        this.seed = pSeed;
        initialize();
    }

    @Override
    public BigInteger8BitGeneratable generateNextFromCurrent(
            BigInteger8BitGeneratable current) {
        return  multiplyAndDivide(current.getObjectHolder());
    }
    
    protected void initialize(){
        this.currentElement = multiplyAndDivide(seed);
    }
    
    private BigInteger8BitGeneratable multiplyAndDivide(BigInteger number){
        return new BigInteger8BitGeneratable(number.multiply(multiplier).remainder(divisor));
    }
}
